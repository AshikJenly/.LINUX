

When processing a command in Bash, the following steps are typically taken:

Bash reads the command from the command line, and performs shell expansions (such as tilde expansion or parameter expansion) on the command line, replacing any variable or expression references with their values.
Bash breaks the command line into individual words, using whitespace as a delimiter. This process is called word splitting.
Bash performs filename expansion (or globbing) on any words that contain filename wildcards, replacing the wildcard with a list of matching filenames in the current directory.
Bash searches for the command in the directories specified by the PATH environment variable, and executes the first matching command found. If the command is not found, Bash displays an error message.
The executed command runs and interacts with the user or the system, as appropriate.
When the command completes, Bash returns control to the user, and waits for the next command to be entered.





Expansions in Bash have the following priority order, from highest to lowest:

Brace expansion: {a,b,c} expands to "a b c" (or multiple words, depending on the context)
Tilde expansion: ~user expands to the home directory of "user"
Parameter expansion: $variable expands to the value of "variable"
Command substitution: $(command) or command expands to the output of "command"
Arithmetic expansion: $((expression)) performs arithmetic on "expression"
Word splitting: breaks up a string into separate words based on whitespace or other separators
Filename expansion (also known as globbing): expands patterns like * or ? to match filenames in the current directory.
